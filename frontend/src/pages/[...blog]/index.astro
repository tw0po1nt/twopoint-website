---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/blog/SinglePost.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { findImage } from '~/utils/images';
import { getApiUri } from '~/utils/api';
import type { MetaData } from '~/types';
import RelatedPosts from '~/components/blog/RelatedPosts.astro';
import NavigationLinks from '~/components/blog/NavigationLinks.astro';
import supportConfig from '~/support-config.json';
import Comments from '~/components/widgets/Comments.fs';
import Support from '~/components/widgets/Support.fs';

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsBlogPost();
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const apiUri = getApiUri(process.env.PUBLIC_STAGE || 'local');
const { post } = Astro.props as Props;

const url = getCanonical(getPermalink(post.permalink, 'post'));
const image = (await findImage(post.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: post.title,
    description: post.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image
        ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] }
        : {}),
    },
  },
  { ...(post?.metadata ? { ...post.metadata, canonical: post.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <SinglePost post={{ ...post, image: image }} url={url}>
    {post.Content ? <post.Content /> : <Fragment set:html={post.content || ''} />}
  </SinglePost>
  <div id="comments-section" data-publish-date={post.publishDate.toISOString()}>
    <Comments client:only="react" uri={apiUri} slug={post.slug} />
  </div>
  <NavigationLinks post={post} />
  <Support client:only="react" config={JSON.stringify(supportConfig)} />
  <RelatedPosts post={post} />
</Layout>

<script>
  // Check if the post has been published and hide comments if not
  function checkCommentsVisibility() {
    const commentsSection = document.getElementById('comments-section');
    if (!commentsSection) return;

    const publishDateStr = commentsSection.getAttribute('data-publish-date');
    if (!publishDateStr) return;

    const publishDate = new Date(publishDateStr);
    const now = new Date();

    // If the publish date is in the future, hide comments
    if (publishDate > now) {
      commentsSection.style.display = 'none';
    }
  }

  // Run on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', checkCommentsVisibility);
  } else {
    checkCommentsVisibility();
  }

  // Re-run after Astro page transitions
  document.addEventListener('astro:page-load', checkCommentsVisibility);
</script>
